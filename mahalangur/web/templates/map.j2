<!doctype html>
<html lang="en">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mahalangur</title>
    <style>
        html, body, header, footer, div {
            padding: 0;
            margin: 0;
        }

        html {
            height: 100%;
        }

        body {
            background-color: #333;
            font: 14px sans-serif;
        }

        #site-main {
            display: flex;
            flex-flow: column;
            position: relative;
            min-width: 100vw;
            min-height: 100vh;
            z-index: 1;
            overflow: auto;
        }

        #site-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            flex-wrap: wrap;
        }

        #site-title {
            margin: 1rem;
            padding: 0;
            font-size: 2.4rem;
            color: #fff;
        }

        #modal-button {
            display: block;
            font-size: 1.2rem;
            color: #fff;
            margin: 1rem;
            padding: 0.7rem;
            border-radius: 0;
            border: 1px solid #888;
            background-color: #555;
        }

        #modal-button:hover {
            background-color: #666;
        }

        #map {
            flex: 1;
            background-color: #333;
        }

        .popup {
            text-align: center;
        }

        .popup h1 {
            font-size: 1.5rem;
            margin: 0;
        }

        .popup h2 {
            font-size: 2rem;
            margin: 0;
        }

        .popup h3 {
            font-size: 1rem;
            margin: 0;
            font-weight: normal;
        }

        #site-footer {
            color: white;
            text-align: center;
            font-size: 0.8rem;
        }

        #site-footer a {
            color: white;
        }

        #modal {
            display: none;
            justify-content: center;
            align-items: center;
            width: 100vw;
            height: 100vh;
            position: fixed;
            top: 0;
            left: 0;
            z-index: 2;
            overflow: auto;
            background-color: rgba(0,0,0,0.5);
        }

        #modal-content {
            display: block;
            box-sizing: border-box;
            padding: 1rem;
            background-color: #fff;
            max-height: 100%;
            max-width: 100%;
            width: 34rem;
            overflow: auto;
        }
    </style>
    <link rel="stylesheet" href="https://unpkg.com/leaflet@1.6.0/dist/leaflet.css"
        integrity="sha512-xwE/Az9zrjBIphAcBb3F6JVqxf46+CDLwfLMHloNu6KEQCAWi6HcDUbeOfBIptF7tcCzusKFjFw2yuvEpDL9wQ=="
        crossorigin=""/>
</head>
<body>
<main id="site-main">
    <header id="site-header">
        <h1 id="site-title">Mahalangur</h1>
        <button id="modal-button">Summit Probability</button>
    </header>
    <div id="map"></div>
    <footer id="site-footer">
        <p><a href="https://github.com/trthatcher/Mahalangur">Mahalangur on Github</a></p>
    </footer>
</main>
<div id="modal">
    <div id="modal-content">
        <h1>Tell Us About Your Expedition</h1>
        <form id="expedition-form">
            <p>What is your age?</p>
            <input name="age" type="number" step="1" min="16" max="65" value="30">
            <p>What is your sex?<p>
            <ul>
                <li><label><input name="sex" type="radio" value="M" checked="checked">Male</label></li>
                <li><label><input name="sex" type="radio" value="F">Female</label></li>
            </ul>
            <p>Will you use supplemental oxygen?</p>
            <ul>
                <li><label><input name="o2_used" type="radio" value="N" checked="checked">No</label</li>
                <li><label><input name="o2_used" type="radio" value="Y">Yes</label></li>
            </ul>
            <p>What year will you attempt the summit?</p>
            <input name="expedition_year" type="number" step="1" min="2020" max="2040" value="2020">
            <p>What season will you attempt the summit?</p>
            <ul>
                <li><label><input name="season" type="radio" value="Spring">Spring</label></li>
                <li><label><input name="season" type="radio" value="Summer">Summer</label></li>
                <li><label><input name="season" type="radio" value="Autumn" checked="checked">Autumn</label></li>
                <li><label><input name="season" type="radio" value="Winter">Winter</label></li>
            </ul>
            <p>Will you be using a commercial route?</p>
            <ul>
                <li><label><input name="commercial_route" type="radio" value="N" checked="checked">No</label></li>
                <li><label>Yes<input name="commercial_route" type="radio" value="Y"></label></li>
            </ul>
            <p>How many hired guides will be on the expedition?</p>
            <input name="total_hired" type="number" step="1" min="0" max="15" value="0">
            <p>How many members (excluding guides) will be on the expedition?</p>
            <input name="total_members" type="number" step="1" min="1" max="25" value="1">
        </form>
        <button id="expedition-form-button">Submit</button>
    </div>
</div>

<script src="https://unpkg.com/leaflet@1.6.0/dist/leaflet.js"
    integrity="sha512-gZwIG9x3wUXg2hdXF6+rVkLF/0Vi9U8D2Ntg4Ga5I5BZpVkVxlJWbSQtXPSiUTtC0TjtGOmxa1AJPuV0CPthew=="
    crossorigin=""></script>

<script>
    /***** Form Interaction *****/

    function toggleModal() {
        var modal = document.getElementById('modal');
        var isHidden = window.getComputedStyle(modal).display === 'none';
        modal.style.display = isHidden ? 'flex' : 'none';
    }

    document.getElementById('modal'        ).onclick = toggleModal;
    document.getElementById('modal-button' ).onclick = toggleModal;
    document.getElementById('modal-content').onclick = function () {
        event.stopPropagation();
    };


    /***** Peak Icon Creation *****/

    class ColorRange {
        constructor(lower, upper) {
            this.lower = lower;
            this.upper = upper;
        }

        getColor(value) {
            const lower = this.lower,
                  upper = this.upper;

            var delta = upper - lower;
            var alpha = Math.min(Math.max(0, value - lower), delta)/delta;

            /* #009948 hsla(148, 100%, 30%, 1) */
            /* #ffff80 hsla(60 , 100%, 75%, 1) */

            /* 240, 100%, 25.1% */

            var h = Math.round((1 - alpha)*240 + alpha*240);
            var s = Math.round((1 - alpha)*10 + alpha*100);
            var l = Math.round((1 - alpha)*80 + alpha*25 );

            return `hsl(${h} 100% ${l}%)`;
        }

        setRange(lower, upper) {
            this.lower = lower;
            this.upper = upper;
        }
    }

    const colorRange = new ColorRange(0, 100);


    function createPeakIcon(fillColor, width=50, height=50) {
        var pathStyle = 'stroke:#000;stroke-width:5;stroke-linecap:butt;stroke-linejoin:miter;stroke-opacity:1;fill-opacity:1;stroke-miterlimit:4;stroke-dasharray:none';

        var svg = document.createElement('svg');
        svg.setAttribute('width'  , width.toString()        );
        svg.setAttribute('height' , height.toString()       );
        svg.setAttribute('viewBox', '0 0 100 100'           );
        svg.setAttribute('style'  , 'background-color:none;overflow:visible;');

        var triangle = document.createElement('path');
        triangle.setAttribute('d', 'm 0,100 50,-100 50,100 z');
        triangle.setAttribute('style', 'fill:' + fillColor + ';' + pathStyle);

        svg.appendChild(triangle);

        return L.divIcon({
            html:       svg.outerHTML,
            className:  null,
            iconSize:   [width, height],
            iconAnchor: [width/2, height],
            popupAnchor: [0, -height]
        })
    }

    function getPeakColor(probability) {
        if ((0 <= probability) && (probability <= 100) && Number.isFinite(probability)) {
            return colorRange.getColor(probability);
        } else {
            return 'hsl(0 0% 100%)';
        }
    }

    function getPeakIcon(probability) {
        peakColor = getPeakColor(probability);
        return createPeakIcon(peakColor, 25, 25);
    }


    /***** Map Definition & Settings *****/

    const osmUrl = 'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png',
          otmUrl = 'https://{s}.tile.opentopomap.org/{z}/{x}/{y}.png';

    const latLower = 27.4089635,
          latUpper = 30.5429669,
          lonLower = 80.7562824,
          lonUpper = 88.6565770;

    const latPadding = (latUpper - latLower)*0.5,
          lonPadding = (lonUpper - lonLower)*0.5;

    const bounds = L.latLngBounds(
        L.latLng(latLower - latPadding, lonLower - lonPadding),
        L.latLng(latUpper + latPadding, lonUpper + lonPadding)
    );

    function getPopupContent(feature) {
        peakDesc = '<h1>' + feature.properties.name + '<h2>';
        if ('summit_probability' in feature.properties) {
            prob = feature.properties.summit_probability.toString();
            peakDesc +=  '<h2>' + prob + '%</h2><h3>probability of summit</h3>';
        }
        return '<div class="popup">' + peakDesc + '</div>';
    }

    var peakLayer = L.geoJSON(null, {
        pointToLayer: function (feature, latlng) {
            var peakMarker = L.marker(latlng, {icon: getPeakIcon(null)});

            peakMarker.bindPopup(getPopupContent(feature), {autoPan: false});
            peakMarker.on('mouseover', function (e) { this.openPopup() ; });
            peakMarker.on('mouseout' , function (e) { this.closePopup(); });

            return peakMarker;
        }
    });

    var attribution = 'Map Data &copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> Contributors, SRTM | Rendering &copy; <a href="opentopomap.org/">OpenTopoMap</a> | Climb Data &copy; <a href="https://www.himalayandatabase.com/">Himlayan Database</a>';

    var himalLayer = L.geoJSON(),
        osmLayer   = L.tileLayer(osmUrl, {bounds: bounds, attribution: attribution}),
        otmLayer   = L.tileLayer(otmUrl, {bounds: bounds, attribution: attribution});

    var himalayaMap = L.map('map', {
        attributionControl: true,
        center: [29, 84.5],
        layers: [otmLayer, himalLayer, peakLayer],
        maxBounds: bounds,
        maxZoom: 15,
        minZoom: 7,
        zoom: 8
    });

    var baseMaps = {
        'OpenTopoMap'  : otmLayer,
        'OpenStreetMap': osmLayer
    };

    var overlayMaps = {
        'Himals': himalLayer,
        'Peaks' : peakLayer
    };

    L.control.layers(baseMaps, overlayMaps).addTo(himalayaMap);


    /***** Layer Updates *****/

    function populateHimalLayer(himalCollection) {
        parentHimals = new Set();

        himalCollection.features.forEach(himal => {
            if ('parent' in himal.properties) {
                parentHimals.add(himal.properties.parent);
            }
        })

        himalCollection.features.forEach(himal => {
            if (!(parentHimals.has(himal.id))) {
                himalLayer.addData(himal);
            }
        })
    }

    function populatePeakLayer(peakCollection) {
        peakCollection.features.forEach(peak => {
            peakLayer.addData(peak);
        })
    }

    function setSummitProbabilities(summitProbability) {
        let arr = Object.values(summitProbability);
        let min = Math.min(...arr);
        let max = Math.max(...arr);
        colorRange.setRange(min, max);


        peakLayer.eachLayer(layer => {
            if ('feature' in layer) {
                var feature = layer.feature;
                if (feature.id in summitProbability) {
                    feature.properties.summit_probability = summitProbability[feature.id];
                }
            }
        });
    }

    function refreshPeakLayer() {
        peakLayer.eachLayer(layer => {
            if ('feature' in layer) {
                var summitProbability = layer.feature.properties.summit_probability;
                layer.setIcon(getPeakIcon(summitProbability));

                var popup = layer.getPopup();
                console.log(popup);
                popup.setContent(getPopupContent(layer.feature));
            }
        });
    }


    /***** Form Submission *****/

    async function postExpeditionData(data) {
        const response = await fetch(window.location.origin + '/api/v1/', {
            method: 'POST',
            headers: {'Content-Type': 'application/json'},
            body: JSON.stringify(data || {})
        });

        return await response.json();
    }

    function submitExpeditionForm() {
        var formData = new FormData(document.getElementById('expedition-form'));

        var expeditionData = {};
        for (const [k, v] of formData) {
            expeditionData[k] = v;
        }

        postExpeditionData(expeditionData)
            .then(data => {
                if (data.status == 'success') {
                    setSummitProbabilities(data.summit_probabilities);
                    refreshPeakLayer();
                }
            });
    }

    var submitButton = document.getElementById('expedition-form-button');
    submitButton.onclick = function () {
        submitExpeditionForm();
        toggleModal()
    };

    var himalCollection = {{ himal_geojson|tojson }};
    var peakCollection  = {{ peak_geojson|tojson }};

    populateHimalLayer(himalCollection);
    populatePeakLayer(peakCollection);
</script>

</body>
</html>